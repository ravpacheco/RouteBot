<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Takenet.MessagingHub.Client</name>
    </assembly>
    <members>
        <member name="T:Takenet.MessagingHub.Client.Host.Application">
            <summary>
            Defines the configuration type for the application.json file.
            </summary>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.Login">
            <summary>
            Gets or sets the login.
            </summary>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>
            The domain.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.HostName">
            <summary>
            Gets or sets the name of the host.
            </summary>
            <value>
            The name of the host.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.AccessKey">
            <summary>
            Gets or sets the access key.
            </summary>
            <value>
            The access key.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.SendTimeout">
            <summary>
            Gets or sets the send timeout, in milliseconds.
            </summary>
            <value>
            The send timeout.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.MessageReceivers">
            <summary>
            Gets or sets the receivers.
            </summary>
            <value>
            The receivers.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.NotificationReceivers">
            <summary>
            Gets or sets the receivers.
            </summary>
            <value>
            The receivers.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.StartupType">
            <summary>
            Gets or sets the type for the startup .NET type. It must implement <see cref="T:Takenet.MessagingHub.Client.IStartable"/> or <see cref="T:Takenet.MessagingHub.Client.Host.IFactory`1"/>.
            The start is called before the start of the sender.
            The type constructor must be parameterless or receive only a <see cref="T:System.IServiceProvider"/> instance plus a <see cref="!:IDictionary&lt;string, object&gt;"/> settings instance.
            </summary>
            <value>
            The type of the startup.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.Application.Settings">
            <summary>
            Gets or sets the settings to be injected to the startup and receivers types.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="M:Takenet.MessagingHub.Client.Host.Application.ParseFromJson(System.String)">
            <summary>
            Creates an instance of <see cref="T:Takenet.MessagingHub.Client.Host.Application"/> from a JSON input.
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:Takenet.MessagingHub.Client.Host.Application.ParseFromJsonFile(System.String)">
            <summary>
            Creates an instance of <see cref="T:Takenet.MessagingHub.Client.Host.Application" /> from a JSON file.
            </summary>
            <param name="filePath">The path.</param>
            <returns></returns>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.NotificationApplicationReceiver.EventType">
            <summary>
            Gets or sets the type of the event. 
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.ApplicationReceiver.Type">
            <summary>
            Gets or sets the receiver .NET type. 
            The type constructor must be parameterless or receive only a <see cref="T:System.IServiceProvider"/> instance plus a <see cref="T:System.Collections.Generic.IDictionary`2"/> settings instance.
            </summary>
            <value>
            The type of the receiver.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.ApplicationReceiver.Sender">
            <summary>
            Gets or sets the sender filter. It can be a regex.
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.ApplicationReceiver.Destination">
            <summary>
            Gets or sets the destination filter. It can be a regex.
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.ApplicationReceiver.Settings">
            <summary>
            Gets or sets the settings to be injected to the startup and receivers types.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.MessageApplicationReceiver.MediaType">
            <summary>
            Gets or sets the type of the media.
            </summary>
            <value>
            The type of the media.
            </value>
        </member>
        <member name="P:Takenet.MessagingHub.Client.Host.MessageApplicationReceiver.Content">
            <summary>
            Gets or sets the content filter. It can be a regex.
            </summary>
            <value>
            The text regex.
            </value>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Host.IFactory`1">
            <summary>
            Defines a factory for instance of <see cref="!:T"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Takenet.MessagingHub.Client.Host.IFactory`1.CreateAsync(System.IServiceProvider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the asynchronous.
            </summary>
            <param name="serviceProvider">A service provider to allow resolving references.</param>
            <param name="settings">A settings dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:Takenet.MessagingHub.Client.Host.Bootstrapper.StartAsync(Takenet.MessagingHub.Client.Host.Application,System.IServiceProvider,System.Boolean)">
            <summary>
            Creates ans starts an application with the given settings.
            </summary>
            <param name="application">The application instance. If not defined, the class will look for an application.json file in the current directory.</param>
            <param name="serviceProvider">The service provider to be used when building the type instances. It not provided, the only injected types will be the <see cref="T:Takenet.MessagingHub.Client.IMessagingHubSender" /> and the settings instances.</param>
            <param name="loadAssembliesFromWorkingDirectory">if set to <c>true</c> indicates to the bootstrapper to load all assemblies from the current working directory.</param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.ArgumentException">At least an access key or password must be defined</exception>
            <exception cref="T:System.IO.FileNotFoundException">Could not find the 'application.json' file</exception>
            <exception cref="T:System.ArgumentException">At least an access key or password must be defined</exception>
        </member>
        <member name="M:Takenet.MessagingHub.Client.IEnvelopeListener.AddMessageReceiver(System.Func{Takenet.MessagingHub.Client.Receivers.IMessageReceiver},System.Predicate{Lime.Protocol.Message})">
            <summary>
            Add a message receiver listener to handle received messages.
            </summary>
            <param name="receiverFactory">A function used to build the notification listener</param>
            <param name="predicate">The message predicate used as a filter of messages received by listener. When not informed, only receives messages which no 'typed' receiver is registered.</param>
        </member>
        <member name="M:Takenet.MessagingHub.Client.IEnvelopeSender.SendCommandAsync(Lime.Protocol.Command)">
            <summary>
            Send a command through the Messaging Hub
            </summary>
            <param name="command">Command to be sent</param>
            <returns>A task representing the sending operation. When completed, it will contain the command response</returns>
        </member>
        <member name="M:Takenet.MessagingHub.Client.IEnvelopeSender.SendMessageAsync(Lime.Protocol.Message)">
            <summary>
            Send a message through the Messaging Hub
            </summary>
            <param name="message">Message to be sent</param>
            <returns>A task representing the sending operation</returns>
        </member>
        <member name="M:Takenet.MessagingHub.Client.IEnvelopeSender.SendNotificationAsync(Lime.Protocol.Notification)">
            <summary>
            Send a notification through the Messaging Hub
            </summary>
            <param name="notification">Notification to be sent</param>
            <returns>A task representing the sending operation</returns>
        </member>
        <member name="T:Takenet.MessagingHub.Client.EnvelopeSenderExtensions">
            <summary>
            Extension methods for <see cref="T:Takenet.MessagingHub.Client.IEnvelopeSender"/>
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Receivers.INotificationReceiver">
            <summary>
            Specialization of <see cref="T:Takenet.MessagingHub.Client.Receivers.IEnvelopeReceiver`1"/> for notifications
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Receivers.IEnvelopeReceiver`1">
            <summary>
            Receive envelopes from Messaging Hub
            </summary>
            <typeparam name="TEnvelope"></typeparam>
        </member>
        <member name="M:Takenet.MessagingHub.Client.Receivers.IEnvelopeReceiver`1.ReceiveAsync(`0)">
            <summary>
            Receives an envelope
            </summary>
            <param name="envelope">Envelope type</param>
            <returns>Task representing the receive operation</returns>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Receivers.NotificationReceiverBase">
            <summary>
            Base envelope receiver
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Receivers.EnvelopeReceiverBase">
            <summary>
            Base envelope receiver
            </summary>
            <remarks>
            Senders are automatically injected by MessagingHubClient
            </remarks>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Receivers.IMessageReceiver">
            <summary>
            Specialization of <see cref="T:Takenet.MessagingHub.Client.Receivers.IEnvelopeReceiver`1"/> for messages
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Receivers.MessageReceiverBase">
            <summary>
            Base message receiver
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Receivers.BlackholeNotificationReceiver">
            <summary>
            Notification receiver that simply ignores the received notification
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.Receivers.UnsupportedMessageReceiver">
            <summary>
            Message receiver that automatically respond to any message as an unsupported message
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.IMessagingHubClient">
            <summary>
            Allow a client application to connect, send an receive messages, commands and notifications in the Messaging Hub.
            <a src="http://messaginghub.io" />
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.MediaTypes">
            <summary>
            Represent common media types
            </summary>
        </member>
        <member name="P:Takenet.MessagingHub.Client.MediaTypes.Any">
            <summary>
            Represents any media type
            </summary>
        </member>
        <member name="P:Takenet.MessagingHub.Client.MediaTypes.PlainText">
            <summary>
            Represents media type 'text/plain'
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.MessagingHubClient">
            <summary>
                Default implementation for <see cref="T:Takenet.MessagingHub.Client.IMessagingHubClient" /> class.
            </summary>
        </member>
        <member name="M:Takenet.MessagingHub.Client.MessagingHubClient.StopOnLimeExceptionAsync(Lime.Protocol.Network.FailedChannelInformation)">
            <summary>
            In this context, a LimeException usually means that some credential information is wrong, 
            and should be checked.
            </summary>
        </member>
        <member name="T:Takenet.MessagingHub.Client.MessageExtensions">
            <summary>
            Extension methods for <see cref="T:Lime.Protocol.Message"/>
            </summary>
        </member>
    </members>
</doc>
